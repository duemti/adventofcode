<?PHP
ini_set('error_reporting', E_ALL);
 
if ($argc !== 2)
	die("Error: Please provide input file.\n");

$data = file($argv[1]);
if ($data === false)
	die("Error: Invalid file.\n");
$data = array_filter(
			array_map('str_split',
				array_map('trim', $data)));

// PART 1
$po = part_one($data);
echo "Part 1: The Power Consumption is: \e[32m",
	$po['consumption'], "\e[0m. (Gamma: '{$po['gam']}' and Epsilon: '{$po['eps']}')\n";

// PART 2
$pt = part_two($data);
echo "Part 2: The life support rating of the submarine is \e[32m",
	($pt['oxygen'] * $pt['co2']), "\e[0m\n\tRating of Oxygen: '",
	$pt['oxygen'], "' and CO2: '", $pt['co2'], "'.\n";


/**
 * Calculate the Power Consumption of the Submarine
 * based on the Report data.
 */
function	part_one(array $data)
{
	$gamma = "";
	$epsilon = "";

	for ($i = 0; $i < count($data[0]); $i++)
	{
		$count = array_count_values(
					array_column($data, $i));

		$gamma .= ($count[0] > $count[1]) ? "0" : "1";
		$epsilon .= ($count[0] > $count[1]) ? "1" : "0";
	}
	return [
		'gam' => bindec($gamma),
		'eps' => bindec($epsilon),
		'consumption' => bindec($gamma) * bindec($epsilon)
	];
}

/**
 * Calculate the Rating of Oxygen & CO2
 * from the report generated by the submarine.
 */
function	part_two(array $data)
{
	return [
		'oxygen' => bindec(find_rating($data)),
		'co2' => bindec(find_rating($data, false))
	];
}

function	find_rating(array $data, bool $majority = true): string
{
	for ($i = 0; $i < count($data[0]); $i++)
	{
		if (count($data) === 1)
			return implode(current($data));

		$column = array_column($data, $i);
		list('0' => $zero, '1' => $one) = array_count_values($column);
		if ($majority)
			$bit = ($one < $zero) ? "0" : "1";
		else
			$bit = ($one < $zero) ? "1" : "0";

		$new_data = [];
		foreach (array_keys($column, $bit) as $pos)
			$new_data[] = $data[ $pos ];
		$data = $new_data;
	}
	return implode(current($data));
}
